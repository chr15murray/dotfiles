#!/bin/bash

system_type=$(uname -s)

echo "--Starting Bootstrap Script--"

if [ "$system_type" = "Linux" ]; then
	echo "Linux Detected"

	if [ -f "/etc/arch-release" ]; then
		echo "Running Arch specific setup"
		# sudo pacman -S --needed $(comm -12 <(pacman -Slq | sort) <(sort ~/.config/yadm/scripts/pacmanlist))
		paru -Syu --needed $(cat ~/.config/yadm/scripts/paru | grep -v "#")

	elif [ -f "/etc/debian_version" ]; then
		# This needs updating to only run for debian based systems
    # Pre requisits
    type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y) 
    type -p curl >/dev/null || (sudo apt update && sudo apt-get install curl -y) 

		if [ -d /etc/apt/keyrings ]; then
      sudo mkdir -p -m 755 /etc/apt/keyrings
    fi

    # 1Password
    if [ ! -f /etc/apt/keyrings/1password-archive-keyring.gpg ]; then
      curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /etc/apt/keyrings/1password-archive-keyring.gpg
      echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main' | sudo tee /etc/apt/sources.list.d/1password.list
      sudo mkdir -p /etc/debsig/policies/AC2D62742012EA22/
      curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | sudo tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
      sudo mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
      curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg
    fi

    # GH
    if [ ! -f /etc/apt/keyrings/githubcli-archive-keyring.gpg ]; then
      out=$(mktemp) 
      wget -nv -O$out https://cli.github.com/packages/githubcli-archive-keyring.gpg
      cat $out | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null
      sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
	    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    fi

    # App Repos
		# Brave Browser
		# curl -s https://brave-browser-apt-release.s3.brave.com/brave-core.asc | sudo apt-key --keyring /etc/apt/trusted.gpg.d/brave-browser-release.gpg add -
		# echo "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list
		# Etcher
		#echo "deb https://deb.etcher.io stable etcher" | sudo tee /etc/apt/sources.list.d/balena-etcher.list
		#sudo apt-key adv --keyserver hkps://keyserver.ubuntu.com:443 --recv-keys 379CE192D401AB61
		# Spotify
		# curl -sS https://download.spotify.com/debian/pubkey_0D811D58.gpg | sudo apt-key add -
		# echo "deb http://repository.spotify.com stable non-free" | sudo tee /etc/apt/sources.list.d/spotify.list

		# Update Apt
		sudo apt update

		# Install Apt Packages
		xargs -a <(awk '! /^ *(#|$)/' ~/.config/yadm/scripts/aptlist) -r -- sudo apt install -y

		#Cleaning up unused apt packages
		sudo apt autoremove -y

		# Install Snaps
		while IFS="" read -r p || [ -n "$p" ]
		do
      echo Installing $p
		  sudo snap install $p
		done < ~/.config/yadm/scripts/snaplist

		# Make Installs
		#mkdir -p ~/git/makeinstall
		# Dash to Dock
		#if [ -d ~/git/makeinstall/dash-to-dock ]; then
		#  pushd ~/git/makeinstall/dash-to-dock
		#  git pull
		#  make install
		#  popd
		#else
		#  git clone https://github.com/micheleg/dash-to-dock.git ~/git/makeinstall/dash-to-dock
		#  pushd ~/git/makeinstall/dash-to-dock
		#  make install
		#  popd
		#fi

	fi

elif [ "$system_type" = "Darwin" ]; then
	echo "Mac Detected"

	# install homebrew if it's missing
	if ! command -v brew >/dev/null 2>&1; then
		echo "Installing homebrew"
		/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	fi

	# Run homebrew bundle
	if [ -f "$HOME/.Brewfile" ]; then
		echo "Updating homebrew bundle"
		brew bundle --global
	fi

	# Setup iTerm2
	if [ -d "$HOME/.config/iterm2" ]; then
		echo "Setting iTerm preference folder"
		defaults write com.googlecode.iterm2 PrefsCustomFolder "$HOME/.config/iterm2"
		defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool true
	fi

	# Setup Bitbar
	if [ -d "$HOME/bitbar" ]; then
		echo "Setting Bitbar Plugin Directory"
		defaults write com.matryer.BitBar pluginsDirectory "$HOME/bitbar"
	fi

	# Mac Settings
	${HOME}/.config/yadm/scripts/mac-settings.sh

else
	echo "No Bootstrap configuration for " $system_type
	exit 1
fi

# Common Tools
if [ ! -f "$HOME/.oh-my-zsh/oh-my-zsh.sh" ]; then
	echo "Installing Oh-My-Zsh"
	sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
	mv $HOME/.zshrc $HOME/.zshrc_new
	mv $HOME/.zshrc.pre-oh-my-zsh $HOME/.zshrc
fi

# Install ZSH Custom Plugins if not present
echo "Installing any missing zsh plugins - Will not update"
ZSH_CUSTOM=${HOME}/.oh-my-zsh/custom
[ ! -d $ZSH_CUSTOM/themes/powerlevel10k ] && git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k

[ ! -d $ZSH_CUSTOM/plugins/zsh-wakatime ] && git clone --depth=1 https://github.com/wbingli/zsh-wakatime.git $ZSH_CUSTOM/plugins/zsh-wakatime

[ ! -d $ZSH_CUSTOM/plugins/zsh-autosuggestions ] && git clone --depth=1 https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions

[ ! -d $ZSH_CUSTOM/plugins/zsh-completions ] && git clone https://github.com/zsh-users/zsh-completions $ZSH_CUSTOM/plugins/zsh-completions

[ ! -d $ZSH_CUSTOM/plugins/zsh-nix-shell ] && git clone https://github.com/chisui/zsh-nix-shell $ZSH_CUSTOM/plugins/zsh-nix-shell

[ ! -d $ZSH_CUSTOM/plugins/zsh-syntax-highlighting ] && git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting

[ ! -d $ZSH_CUSTOM/plugins/fast-syntax-highlighting ] && git clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git $ZSH_CUSTOM/plugins/fast-syntax-highlighting

# Setup Flathub
echo "Setting up Flatpak and Installing..."
flatpak remotes | grep flathub > /dev/null || flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
cat ~/.config/yadm/scripts/flatpacklist | xargs -n2 flatpak install --assumeyes --noninteractive

echo "Next Suggested action:"
echo "  gh auth login"
echo "  gh extension install redraw/gh-install"

